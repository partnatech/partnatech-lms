generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Course {
  id String @id @default(uuid())
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text @map("image_url")
  price Float?

  categoryId String? @db.Uuid @map("category_id")
  category Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([categoryId])
  @@map("courses")
}

model Category {
  id String @id @default(uuid()) @db.Uuid
  name String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  courses Course[]

  @@map("categories")
}

model Bootcamp {
  id             String    @id @default(uuid()) @db.Uuid
  title          String    @db.VarChar
  videoUrl       String?   @db.VarChar @map("video_url")
  startDate      DateTime  @db.Date() @map("start_date")
  endDate        DateTime  @db.Date() @map("end_date")
  price          Float     @db.DoublePrecision()
  discountPrice  Float?    @db.DoublePrecision() @map("discount_price")
  location       String    @db.VarChar
  preRequisities String    @db.Text @default("") @map("pre_requisities")

  mentorId       String?   @db.Uuid @map("mentor_id")
  mentor         Mentor?   @relation(fields: [mentorId], references: [id])

  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  @@map("bootcamps")
}

model Mentor {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar
  description String   @db.Text

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  bootcamps   Bootcamp[]

  @@map("mentors")
}
