generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String?    @unique
  password      String?
  emailVerified DateTime?  @map("email_verified")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  image         String?
  accounts      Account[]
  sessions      Session[]
  students      Students[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Course {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                 String
  description           String?
  imageUrl              String?                 @map("image_url")
  price                 Float?
  categoryId            String?                 @map("category_id") @db.Uuid
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt @map("updated_at")
  notionSlug            String?                 @map("notion_slug")
  discountPrice         Float?                  @map("discount_price")
  duration              Int?
  durationUnitId        String?                 @map("duration_unit_id") @db.Uuid
  slug                  String?                 @default("")
  courseMentorMappings  CourseMentorMappings[]
  courseModules         CourseModules[]
  courseStudentMappings CourseStudentMappings[]
  category              Category?               @relation(fields: [categoryId], references: [id])
  durationUnits         DurationUnits?          @relation(fields: [durationUnitId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_courses_duration_unit_id_fkey")

  @@index([categoryId])
  @@map("courses")
}

model Category {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  courses   Course[]

  @@map("categories")
}

model Bootcamp {
  id             String   @id @default(uuid()) @db.Uuid
  title          String   @db.VarChar
  videoUrl       String?  @map("video_url") @db.VarChar
  startDate      DateTime @map("start_date") @db.Date
  endDate        DateTime @map("end_date") @db.Date
  price          Float
  discountPrice  Float?   @map("discount_price")
  location       String   @db.VarChar
  mentorId       String?  @map("mentor_id") @db.Uuid
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  preRequisities String   @default("") @map("pre_requisities")
  mentor         Mentor?  @relation(fields: [mentorId], references: [id])

  @@map("bootcamps")
}

model Mentor {
  id                   String                 @id @default(uuid()) @db.Uuid
  name                 String                 @db.VarChar
  description          String
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  avatarUrl            String?                @map("avatar_url")
  bootcamps            Bootcamp[]
  courseMentorMappings CourseMentorMappings[]

  @@map("mentors")
}

model CourseMentorMappings {
  id        String    @id(map: "course_mentor_mapping_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  course_id String?   @map("course_id") @db.Uuid
  mentor_id String?   @map("mentor_id") @db.Uuid
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  courses   Course?   @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_course_mentor_mapping_course_id_fkey")
  mentors   Mentor?   @relation(fields: [mentor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_course_mentor_mapping_mentor_id_fkey")

  @@map("course_mentor_mappings")
}

model DurationUnits {
  id           String   @id(map: "duration_unit_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  durationUnit String?  @map("duration_unit")
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  courses      Course[]

  @@map("duration_units")
}

model CourseModuleLectures {
  id                           String                         @id(map: "course_section_lecture_pkey") @db.Uuid
  createdAt                    DateTime                       @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                    DateTime?                      @updatedAt @map("updated_at") @db.Timestamp(6)
  name                         String?
  videoUrl                     String?                        @map("video_url")
  course_module_id             String?                        @db.Uuid
  slug                         String                         @unique(map: "course_section_lecture_slug_key") @default("")
  notionSlug                   String?                        @map("notion_slug")
  courseModules                CourseModules?                 @relation(fields: [course_module_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_course_section_lecture_course_section_id_fkey")
  studentCourseLectureMappings StudentCourseLectureMappings[]

  @@map("course_module_lectures")
}

model CourseModules {
  id                   String                 @id(map: "course_sections_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime?              @updatedAt @map("updated_at") @db.Timestamp(6)
  courseSectionName    String?                @map("course_section_name")
  course_id            String?                @map("course_id") @db.Uuid
  courseModuleLectures CourseModuleLectures[]
  courses              Course?                @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_course_sections_course_id_fkey")

  @@map("course_modules")
}

model CourseStudentMappings {
  id            String    @id(map: "course_student_mapping_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  course_id     String?   @db.Uuid
  student_id    String?   @db.Uuid
  updatedAt     DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  enrolled_date DateTime? @db.Timestamptz(6)
  courses       Course?   @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_course_student_mapping_course_id_fkey")
  students      Students? @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_course_student_mapping_student_id_fkey")

  @@map("course_student_mappings")
}

model StudentCourseLectureMappings {
  id                   String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  student_id           String?               @db.Uuid
  lecture_id           String?               @db.Uuid
  completion           Boolean?
  completion_date      DateTime?             @db.Timestamptz(6)
  updatedAt            DateTime?             @updatedAt @map("updated_at") @db.Timestamptz(6)
  courseModuleLectures CourseModuleLectures? @relation(fields: [lecture_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_student_course_lecture_mappings_lecture_id_fkey")
  students             Students?             @relation(fields: [student_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_student_course_lecture_mappings_student_id_fkey")

  @@map("student_course_lecture_mappings")
}

model Students {
  id                           String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt                    DateTime                       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                    DateTime?                      @updatedAt @map("updated_at") @db.Timestamptz(6)
  user_id                      String?                        @map("user_id")
  emails                       String                         @db.VarChar
  courseStudentMappings        CourseStudentMappings[]
  studentCourseLectureMappings StudentCourseLectureMappings[]
  users                        User?                          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "public_students_user_id_fkey")

  @@map("students")
}

model Subscriptions {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)
  name          String?   @db.VarChar
  price         Float?
  discountPrice Float?    @map("discount_price")
  monthDuration Int?      @map("month_duration")

  @@map("subscriptions")
}
